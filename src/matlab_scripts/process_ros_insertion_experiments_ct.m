%% process_ros_insertion_experiments_ct
%
% This is a script to handle post-processed ROS data 
%
% - written by: Dimitri Lezcano
global EXPMT_TIMEZONE
EXPMT_TIMEZONE = "America/New_York";

%% Data Directory and File Setup
% data directories
data_dir = fullfile( ...
    ... "/Volumes/dlezcan1-data",...
    "~/data", ...
    "7CH-4AA-0001-MCF-even", ...
    "2023-06-15_2023-06-16_Beef-Insertion-Experiment" ...
);

exp_date = "2023-06-15";
ct_data_dir = fullfile( ...
    data_dir, ...
    "ct_images", ...
    "mcf-beef-insertion-CT", ...
    "results", ...
     exp_date...
);

needle_data_dir = fullfile( ...
    data_dir, ...
    "processed_bags", ...
    exp_date ...
);

% options
recopy_ct_results = false;

% file names
ct_results_filename     = "ct_scan_results.xlsx";
needle_results_filename = "needle_data.xlsx";
robot_data_filename     = "robot_timestamp_ranges.csv";
out_results_filename    = strcat(exp_date, "_", "experiment_results");

use_post_processed_results = true; % CAN CHANGE: default to true
if use_post_processed_results
    needle_results_filename = strrep( ...
        needle_results_filename, ...
        ".xlsx", ...
        "_post-proc.xlsx" ...
    );
end

% Insertion directories
needle_insertion_files = dir(fullfile( ...
    needle_data_dir, ...
    "Insertion*", ...
    "*", ...
    needle_results_filename...
));

ct_result_files = dir(fullfile( ...
    ct_data_dir, ...
    "**", ...
    ct_results_filename ...
));

%% Tabulate the CT Results=
ct_results = cell(numel(ct_result_files), 1);
for ct_idx = 1:numel(ct_result_files)
    ct_result_file_i = ct_result_files(ct_idx);
    ct_data = load_ct_data(fullfile(ct_result_file_i.folder, ct_result_file_i.name));
    ct_data.filename = fullfile(ct_result_file_i.folder, ct_result_file_i.name);

    ct_results{ct_idx} = ct_data;
end

%% Process Each Insertion
% options
buffer_dt = seconds(20); % buffer time for matching

% initalization
columns_types = {
    'insertion_number', 'double';
    'insertion_depth', 'double';
    'timestamp', 'datetime';
    'needle_shape','cell';
    'ct_shape', 'cell';
    'curvature', 'cell';
    'kappa_c', 'cell';
    'w_init', 'cell';
    'fiducial_locations', 'cell';
    'fiducial_pose', 'cell';
};
results_tbl = table( ...
    'Size', [numel(needle_insertion_files), size(columns_types, 1)], ...
    'VariableNames', columns_types(:, 1), ...
    'VariableTypes', columns_types(:, 2) ...
);
results_tbl.timestamp.TimeZone = EXPMT_TIMEZONE;



% iterate over needle insertion files
skip_file_idxs = [];
for ndl_file_idx = 1:numel(needle_insertion_files)
    % file handling
    needle_file_i = needle_insertion_files(ndl_file_idx);
    needle_file_i_psplit = pathsplit(needle_file_i.folder);
    insertion_dir = pathjoin(needle_file_i_psplit(1:end-1));
    
    % load data
    needle_data = load_needle_data(fullfile(needle_file_i.folder, needle_file_i.name));
    robot_data  = load_robot_data(fullfile(insertion_dir, robot_data_filename));
    robot_data_trial = table2struct(...
        robot_data(robot_data.InsertionDepth == needle_data.insertion_depth, :)...
    );
    
    % load the CT data on hand
    ct_results_indir = dir(fullfile( ...
        needle_file_i.folder, ...
        strcat("*", ct_results_filename)...
    ));

    if numel(ct_results_indir) == 1 && ~recopy_ct_results
        ct_data = load_ct_data(fullfile(ct_results_indir(1).folder, ct_results_indir(1).name));

    else
        ct_data = [];
    
        for ct_idx = 1:numel(ct_results)
            ct_result_i = ct_results{ct_idx};
            
            if ...
                (needle_data.timestamps.range_min - buffer_dt <= ct_result_i.timestamp) ...
                && (ct_result_i.timestamp <= needle_data.timestamps.range_max + buffer_dt)
                ct_data = [ct_data; ct_result_i];
            end
    
        end
        
        disp(fullfile(needle_file_i.folder, needle_file_i.name))
        fprintf("Number of CT results in range is: %d\n", numel(ct_data));
        disp(strcat("    Min timestamp: ", string(needle_data.timestamps.range_min)));
        disp(strcat("    Max timestamp: ", string(needle_data.timestamps.range_max)));
        for i = 1:numel(ct_data)
            disp(strcat("    CT timestamp : ", string(ct_data(i).timestamp)));
        end
       
        if numel(ct_data) ~= 1
            disp("Incorrect number of CT results found. Skipping...")
            disp(" ")
            skip_file_idxs = [ndl_file_idx; skip_file_idxs];
            continue
        end

        ct_data = ct_data(1);

        % copy over ct scan file
        cp_ct_file = fullfile( ...
            needle_file_i.folder, ...
            strcat( ...
                string(ct_data(i).timestamp, 'yyyy-MM-dd_HH-mm-ss'), ...
                '_', ...
                ct_results_filename ...
            ) ...
        );
        copyfile( ...
            ct_data(1).filename, ...
            cp_ct_file ...
        );
        fprintf( ...
            "Copied CT results from %s -> %s\n", ...
            ct_data(1).filename, ...
            cp_ct_file ...
        )
    end

    % set the table data
    results_tbl{ndl_file_idx, 'needle_shape'}     = {needle_data.shape};
    results_tbl{ndl_file_idx, 'curvature'}        = {needle_data.curvature};
    results_tbl{ndl_file_idx, 'kappa_c'}          = {needle_data.kappa_c};
    results_tbl{ndl_file_idx, 'w_init'}           = {needle_data.w_init};
    results_tbl{ndl_file_idx, 'insertion_number'} = needle_data.insertion_number;
    results_tbl{ndl_file_idx, 'insertion_depth'}  = needle_data.insertion_depth;

    results_tbl{ndl_file_idx, 'ct_shape'}           = {ct_data.shape};
    results_tbl{ndl_file_idx, 'fiducial_locations'} = {ct_data.fiducial_locations};
    results_tbl{ndl_file_idx, 'fiducial_pose'}      = {ct_data.fiducial_pose};
    results_tbl{ndl_file_idx, 'timestamp'}          = ct_data.timestamp;

    % prompt
    fprintf("Processed Insertion Dir: %s\n", needle_file_i.folder)
    disp(" ");
end

% clean up and show
results_tbl(skip_file_idxs, :) = [];
results_tbl = sortrows(results_tbl, {'insertion_number', 'insertion_depth'});

results_tbl

% save the results table
out_results_tbl_file = fullfile(data_dir, "experiment_results", strcat(out_results_filename, '.mat'));
save(out_results_tbl_file, 'results_tbl');
fprintf("Saved results table to: %s\n", out_results_tbl_file);



%% Helper Functions
% load the needle data
function data = load_needle_data(filename)
    global EXPMT_TIMEZONE

    data.shape     = readmatrix(filename, 'Sheet', 'shape');
    data.curvature = reshape(readmatrix(filename, 'Sheet', 'curvature'), 2, []);
    data.kappa_c   = readmatrix(filename, 'Sheet', 'kappa_c');
    data.w_init    = readmatrix(filename, 'Sheet', 'winit');

    % handle timestamps
    filename_original = strrep( ...
        filename, ...
        "_post-proc.xlsx", ...
        ".xlsx" ...
    );
    timestamps = readtable( ...
        filename_original, ...
        "Sheet", "ROS timestamps", ...
        "ReadRowNames", true ...
    );
    timestamps = rowfun( ...
        @(ts) datetime( ...
            ts, ...
            'convertfrom', 'EpochTime', ...
            'tickspersecond', 1e9, ...
            'TimeZone', 'UTC' ...
        ), ...
        timestamps ...
    );
    timestamps = rowfun( ...
        @(ts) setfield(ts, 'TimeZone', EXPMT_TIMEZONE), ...
        timestamps ...
    ); % Convert UTC -> EST
    timestamps = rows2vars(timestamps);
    data.timestamps = table2struct(timestamps(:, 2:end));
    
    % handle insertion information
    filename_split         = pathsplit(filename);
    insertion_number_regex = regexp( ...
        filename_split{end-2}, ...
        "Insertion(\d+)", ...
        'tokens'...
    );
    data.insertion_number  = str2num(insertion_number_regex{1}{1});
    data.insertion_depth   = str2double(filename_split{end-1});

end

function data = load_robot_data(filename)
    global EXPMT_TIMEZONE

    tbl_varname_warnid = 'MATLAB:table:ModifiedAndSavedVarnames';

    warning('off', tbl_varname_warnid);
    data = readtable(...
        filename, ...
        'VariableNamingRule', 'modify', ...
        'ReadRowNames', false, ...
        'ReadVariableNames', true ...
    );
    warning('on', tbl_varname_warnid);
    
    data = renamevars(...
        data, ...
        {'InsertionDepth_mm_'}, ...
        {'InsertionDepth'}...
    );
    
    % convert to datetimes
    data.ts_min = datetime( ...
        data.ts_min, ...
        'convertfrom', 'EpochTime', ...
        'tickspersecond', 1e9, ...
        'TimeZone', 'UTC' ...
    );
    data.ts_max = datetime( ...
        data.ts_max, ...
        'convertfrom', 'EpochTime', ...
        'tickspersecond', 1e9, ...
        'TimeZone', 'UTC' ...
    );

    % timezone change
    data.ts_min.TimeZone = EXPMT_TIMEZONE;
    data.ts_max.TimeZone = EXPMT_TIMEZONE;


end

% load the CT data
function data = load_ct_data(filename)
    global EXPMT_TIMEZONE
    
    data.shape              = flip(readmatrix(filename, 'Sheet', 'needle shape'), 1);
    data.fiducial_locations = readmatrix(filename, 'Sheet', 'fiducial locations');
    data.fiducial_pose      = readmatrix(filename, 'Sheet', 'fiducial pose');
    
    % handle timestamp
    filename_split = pathsplit(filename);
    try
        data.timestamp = datetime( ...
            filename_split{end-1}, ...
            'InputFormat', 'yyyy-MM-dd_HH-mm-ss', ...
            'TimeZone', EXPMT_TIMEZONE ...
        );
    catch
        ts_str = filename_split{end};
        ts_str = ts_str(1:19);
        data.timestamp = datetime( ...
            ts_str, ...
            'InputFormat', 'yyyy-MM-dd_HH-mm-ss', ...
            'TimeZone', EXPMT_TIMEZONE ...
        );
    end
end